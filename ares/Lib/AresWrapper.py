""" Local wrapper to be able to produce static reports locally without server

From this mode the framework will generate a static html page.
This will allow to produce statics reports and to share the page even without any access to the network

Some external Javascript and CSS libraries are required to be able to run the tool fully locally

Do not use True in both python and Javascript as the Json conversion is not really optimal. Please use boolean instead

Ares documentation is available here:
  http://127.0.0.1:5000/reports/doc
[This documentation is autogenerated from the script comments]

"""

from __future__ import print_function
import os
import sys
from ares.Lib import Ares

# Path for the server on which you are testing the report
# The name of the report you are working on (The folder name)
SERVER_PATH = 'http://127.0.0.1:5000'
REPORT = "Youpi" # The name of the main script with the report

# CSS imports
CSS = ['bootstrap.min.css',
       'jquery-ui.css',
       'bootstrap-theme.min.css',
       'bootstrap-select.min.css',
       'nv.d3.css',
       'svg.css'
       'jquery.dataTables.min.css',
       'bootstrap-simple-sidebar.css',
       'font-awesome.min.cs',
       'metro-bootstrap.min.css',
       'buttons.dataTables.min.css',
       'responsive.dataTables.min.css',
       'bdi.css']

# Javascript imports
JS = ['jquery-3.2.1.min.js',
      'jquery-ui.min.js',
      'bootstrap.min.js',
      'bootstrap-select.min.js',
      'transition.min.js',
      'collapse.js',
      'd3.v3.js',
      'nv.d3.js',
      'd3.layout.cloud.js',
      'colorbrewer.js', # The mimifyed version does not contain indentedTree objects. https://stackoverflow.com/questions/35452946/not-running-minimal-example-of-indentedtree
      'jquery.dataTables.min.js', # world cloud chart
      'dataTables.buttons.min.js', # world cloud chart
      'dataTables.responsive.min.js', # world cloud chart
      'buttons.colVis.min.js', # world cloud chart
      'pdfmake.min.js', # world cloud chart
      'vfs_fonts.js', # world cloud chart
      'ares.js', # world cloud chart
      ]


def getReport(results, scriptPath):
  """ Recursively runs all the reports """
  for report in os.listdir(scriptPath):
    if report.endswith(".py"):
      reportModule = __import__(report.replace(".py", ""))
      if hasattr(reportModule, 'report'):
        print("  > Loading report %s" % report)
        aresObj = Ares.Report()
        aresObj.http['DIRECTORY'] = scriptPath
        aresObj.http['REPORT_NAME'] = report.replace(".py", "")
        try:
          results[reportModule.__name__] = reportModule.report(aresObj)
        except Exception as e:
          print("Error with report %s" % report)
          print(e)
      else:
        print("Module ignore %s" % report)



if __name__ == '__main__':
  # Run the script locally

  result_folder = 'html'
  directory = os.getcwd() # The path of this script by default
  # This will move all the results in a html folder
  # It only work locally
  path = os.path.join(directory, result_folder, REPORT)
  if not os.path.exists(path):
    os.makedirs(path)
  if not SERVER_PATH:
    localPathSize = len(os.path.split(path))
    if os.path.split(path)[0] == '':
      localPathSize -= 1
    SERVER_PATH = os.path.join(*[".." for i in range(localPathSize)])

  # Create the generic headers and footers
  header = Ares.htmlLocalHeader(r"%s/static" % SERVER_PATH, CSS, JS)
  footer = Ares.htmlLocalFooter()

  res = {}
  directoryPath = os.path.join(directory, REPORT)
  sys.path.append(directoryPath)
  ajaxPath = os.path.join(directory, REPORT, 'ajax')
  if os.path.exists(ajaxPath):
    sys.path.append(ajaxPath)
  getReport(res, directoryPath)

  for report, htmlReport in res.items():
    htmlFile = open(r"%s\%s.html" % (path, report), "w")
    jsOnload, html, js = htmlReport.html()
    htmlFile.write(header)
    htmlFile.write("\n  <script>\n")
    htmlFile.write(jsOnload)
    htmlFile.write("\n  </script>\n</head>\n<body oncontextmenu='return false;' style='background-color: #EAEAEA'>\n<div id='wrapper'>\n<div class='container' id='html_content'>\n")
    htmlFile.write(html)
    htmlFile.write("\n<script>\n")
    htmlFile.write(js)
    htmlFile.write("\n</script>\n</div></div>")
    htmlFile.write(footer)
    htmlFile.close()






