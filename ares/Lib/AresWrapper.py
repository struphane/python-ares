""" Local wrapper to be able to produce static reports locally without server

From this mode the framework will generate a static html page.
This will allow to produce statics reports and to share the page even without any access to the network

Some external Javascript and CSS libraries are required to be able to run the tool fully locally

Do not use True in both python and Javascript as the Json conversion is not really optimal. Please use boolean instead

Ares documentation is available here:
  http://127.0.0.1:5000/reports/doc
[This documentation is autogenerated from the script comments]

"""

from __future__ import print_function
import os
import sys

from click import echo

from ares.Lib import Ares


# CSS imports
CSS = ['bootstrap.min.css',
       'jquery-ui.css',
       'bootstrap-theme.min.css',
       'nv.d3.css',
       'svg.css'
       'jquery.dataTables.min.css',
       'bootstrap-simple-sidebar.css',
       'font-awesome.min.cs',
       'metro-bootstrap.min.css',
       'buttons.dataTables.min.css',
       'responsive.dataTables.min.css',
       'bdi.css']

# Javascript imports
JS = ['jquery-3.2.1.min.js',
      'jquery-ui.min.js',
      'bootstrap.min.js',
      'transition.min.js',
      'collapse.js',
      'd3.v3.js',
      'nv.d3.js',
      'd3.layout.cloud.js',
      'colorbrewer.js', # The mimifyed version does not contain indentedTree objects. https://stackoverflow.com/questions/35452946/not-running-minimal-example-of-indentedtree
      'jquery.dataTables.min.js', # world cloud chart
      'dataTables.buttons.min.js', # world cloud chart
      'dataTables.responsive.min.js', # world cloud chart
      'buttons.colVis.min.js', # world cloud chart
      'pdfmake.min.js', # world cloud chart
      'vfs_fonts.js', # world cloud chart
      'ares.js', # world cloud chart
      ]


def getReport(reportModule, results, scriptPath):
  """ Recursively runs all the reports """
  echo("  > Running report %s" % reportModule.__name__)
  aresObj = Ares.Report()
  aresObj.http['DIRECTORY'] = scriptPath
  results[reportModule.__name__] = reportModule.report(aresObj)



if __name__ == '__main__':
  # Run the script locally
  statisPath = r'http://127.0.0.1:5000/static' # the path with the CSS and JS folders (if current path please keep this empty
  directory = r'E:\GitHub\Ares\localtests' # The path of this script by default
  report = "JsGraph" # The name of the main script with the report
  result_folder = 'html'

  # This will move all the results in a html folder
  # It only work locally
  path = os.path.join(directory, result_folder, report)
  if not os.path.exists(path):
    os.makedirs(path)
  if not statisPath:
    localPathSize = len(os.path.split(path))
    if os.path.split(path)[0] == '':
      localPathSize -= 1
    statisPath = os.path.join(*[".." for i in range(localPathSize)])

  # Create the generic headers and footers
  header = Ares.htmlLocalHeader(statisPath, CSS, JS)
  footer = Ares.htmlLocalFooter()

  res = {}
  sys.path.append(os.path.join(directory, report))
  directoryPath = os.path.join(directory, report)
  ajaxPath = os.path.join(directory, report, 'ajax')
  if os.path.exists(ajaxPath):
    sys.path.append(ajaxPath)
  getReport(__import__(report), res, directoryPath)

  for report, htmlReport in res.items():
    htmlFile = open(r"%s\%s.html" % (path, report), "w")
    jsOnload, html, js = htmlReport.html()
    htmlFile.write(header)
    htmlFile.write("\n  <script>\n")
    htmlFile.write(jsOnload)
    htmlFile.write("\n  </script>\n</head>\n<body oncontextmenu='return false;' style='background-color: #EAEAEA'>\n<div id='wrapper'>\n<div class='container' id='html_content'>\n")
    htmlFile.write(html)
    htmlFile.write("\n<script>\n")
    htmlFile.write(js)
    htmlFile.write("\n</script>\n</div></div>")
    htmlFile.write(footer)
    htmlFile.close()






