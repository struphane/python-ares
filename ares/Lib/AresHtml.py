""" Main module for the HTML wrappers

The htmlId is generated by the report layer to ensure that there is no overlap between the ID
This will also help on having comprehensive ID

Please make sure that all the CSS information are defined in a CSS class

Aliases must be unique
"""

import os
import json
import collections
import warnings
import functools
import six

from ares.Lib import AresJs
from ares.Lib import AresItem


def deprecated(func):
    """This is a decorator which can be used to mark functions
    as deprecated. It will result in a warning being emmitted
    when the function is used."""

    @functools.wraps(func)
    def new_func(*args, **kwargs):
        warnings.simplefilter('############################################################################')
        warnings.simplefilter('always', DeprecationWarning) #turn off filter
        warnings.warn("Call to deprecated function {}.".format(func.__name__), category=DeprecationWarning, stacklevel=2)
        warnings.simplefilter('default', DeprecationWarning) #reset filter
        warnings.simplefilter('############################################################################')
        return func(*args, **kwargs)
    return new_func


class SetEncoder(json.JSONEncoder):

   def default(self, obj):
     if issubclass(obj.__class__, Html):
       return obj.val
     if isinstance(obj, set):
       return list(obj)

     return json.JSONEncoder.default(self, obj)


class Html(object):
  """
  Base class for any type of HTML object that the page can display

  THe logic of this module is quite simple.
  All the

  alias - Class variable just use to ensure function and HTML classes are correctly registered
  jsEvent -
  requirements -
  cssCls -

  Requirements
    - jquery-ui.js, for the nice display of the Tooltips, the Date picker and the Slider objects

  """
  alias, jsEvent = None, None
  cssCls, css, reference = None, None, None
  incIndent = 0
  reqJs, reqCss = None, None
  references = []

  def __init__(self, aresObj, vals, cssCls=None, cssAttr=None):
    """ Create an python HTML object """
    self.aresObj = aresObj # The html object ID
    self.attr = {'class': set([])} if self.cssCls is None else {'class': set(self.cssCls)} # default HTML attributes
    if cssCls is not None:
      for clsName in cssCls:
        self.attr['class'].add(clsName)
    if self.css is not None:
      # we need to do a copy of the CSS style at this stage
      self.attr['css'] = dict(self.css)
    if cssAttr is not None:
      if self.css is None:
        self.attr['css'] = cssAttr
      else:
        self.attr['css'].update(cssAttr)
    self.jsOnLoad, self.jsEvent, self.jsEventFnc = set(), {}, collections.defaultdict(set)
    self.vals = vals

    if self.aresObj is not None:
       # Some components are not using aresObj because they are directly used for the display
       if self.reqJs is not None:
         for js in self.reqJs:
           self.aresObj.jsImports.add(js)

       if self.reqCss is not None:
         for css in self.reqCss:
           self.aresObj.cssImport.add(css)

  @property
  def htmlId(self):
    """ Property to get the HTML ID of a python HTML object """
    return "%s_%s" % (self.__class__.__name__.lower(), id(self))

  @property
  def jqId(self):
    """
    Property to get the Jquery ID of a python HTML object
    The use of ' instead of " is because the dumps will add some \ and it will not be correctly taken into account
    by the javascript layer
    """
    return "$('#%s')" % self.htmlId

  @property
  def val(self):
    """ Property to get the jquery value of the HTML objec in a python HTML object """
    return '%s.val()' % self.jqId


  # CSS Classes management
  def addClass(self, cssCls):
    """ Change the CSS Style of the HTML object """
    self.attr['class'].add(cssCls)

  def getClass(self):
    """ Return as a string the list of classes """
    return " ".join(self.attr['class'])

  def delClass(self, cssCls):
    """ Remove a class from the list of CSS classes """
    self.attr['class'].pop(cssCls)

  def toolTip(self, value):
    """ Add the Tooltip feature when the mouse is over the component """
    self.attr['title'] = value

  def addAttr(self, name, value):
    """ Set an attribute to the HTML object """
    if name == 'css':
      # Section for the Style attributes
      if not 'css' in self.attr:
        self.attr['css'] = value
      else:
        self.attr['css'].update(value)
    elif name == 'class':
      # Section dedicated to manage the CSS classes
      self.attr['class'].add(value)
    else:
      # Section for all the other attributes
      self.attr[name] = value

  def strAttr(self, withId=True):
    """ Return the string line with all the attributes """
    cssStyle, cssClass = '', ''
    if 'css' in self.attr:
      cssStyle = 'style="%s"' % ";".join(["%s:%s" % (key, val) for key, val in self.attr["css"].items()])
    classData = self.getClass()
    if 'class' in self.attr and classData:
      cssClass = 'class="%s"' % classData
    if withId:
      return 'id="%s" %s %s %s' % (self.htmlId, " ".join(['%s="%s"' % (key, val) for key, val in self.attr.items() if key not in ('css', 'class')]), cssStyle, cssClass)

    return '%s %s %s' % (" ".join(['%s="%s"' % (key, val) for key, val in self.attr.items() if key not in ('css', 'class')]), cssStyle, cssClass)

  def __str__(self):
    """ Return the String representation of an Python HTML object """
    raise NotImplementedError('subclasses must override __str__()!')

  def js(self, evenType, jsDef):
    """ Add a Javascript Event to an HTML object """
    self.jsEvent[evenType] = AresJs.JQueryEvents(self.htmlId, self.jqId, evenType, jsDef)

  def jsFromFile(self, evenType, fileName, variables=None):
    """ Add a Javascript even by loading a file """
    jsFile = open(os.path.join(self.aresObj.http["DIRECTORY"], 'js', fileName))
    jsDef = jsFile.read()
    if variables is not None:
      jsDef = jsDef % variables
    self.jsEvent[evenType] = AresJs.JQueryEvents(self.htmlId, self.jqId, evenType, jsDef)

  def update(self, data):
    """ Update the content of an HTML component """
    return '%s.html(%s);' % (self.jqId, data)

  def jsLinkTo(self, htmlObjs):
    """ Send the data to the different HTML objects in order to update them """
    for jqEven in self.jsEvent.values():
      for htmlObj in htmlObjs:
        jqEven.extendJsFnc(htmlObj.update(self.val))

  # ---------------------------------------------------------------------------------------------------------
  #                                          AJAX SECTION
  #
  # The below three methods are dedicated to interactively query the server. So there is not way to test it
  # fully locally. The only way to get it would be to upload the ajax scripts to the server and to test the
  # call from the local report
  #   - The GET method to pass variables in the URL
  #   - The POST method to pass variables in the call
  #   - The Json when the transfer is done using json type of data
  # ---------------------------------------------------------------------------------------------------------
  def get(self, evenType, url, data, jsDef, preAjaxJs=''):
    """
      Get method to get data directly by interacting with the page
      https://api.jquery.com/jquery.get/
    """
    data = 'eval(%s)' % data if isinstance(data, six.text_type) else json.dumps(data)
    jsDef = '%s $.get("%s", %s, function(data) { %s } );' % (preAjaxJs, url, data, jsDef)
    self.jsEvent[evenType] = AresJs.JQueryEvents(self.htmlId, self.jqId, evenType, jsDef, data=data, url=url)

  def post(self, evenType, url, data, jsDef, preAjaxJs='', redirectUrl=''):
    """
      Post method to get data directly by interacting with the page
      https://api.jquery.com/jquery.post/
    """
    data = '%s' % data if isinstance(data, (six.text_type, str)) else json.dumps(data)
    jsDef = '%s $.post("%s", %s, function(data) { %s } );' % (preAjaxJs, url, data, jsDef)
    self.jsEvent[evenType] = AresJs.JQueryEvents(self.htmlId, self.jqId, evenType, jsDef, data=data, url=url)

  def json(self, evenType, url, data, jsDef):
    """
      Special function to input Json data
      http://api.jquery.com/jquery.getjson/
    """
    data = 'eval(%s)' % data if isinstance(data, six.text_type) else json.dumps(data)
    jsDef = '$.getJSON("%s", %s, function(data) { %s });' % (url, data, jsDef)
    self.jsEvent[evenType] = AresJs.JQueryEvents(self.htmlId, self.jqId, evenType, jsDef, data=data, url=url)

  def onLoadFnc(self):
    """ Return a String with the Javascript method to put in the HTML report """
    return None

  def onLoad(self, loadFnc=None):
    """ Functions to get all the onload items for this object and all the underlying object """
    if loadFnc is None:
      loadFnc = self.jsOnLoad
    fnc = self.onLoadFnc()
    if fnc is not None:
      loadFnc.add(fnc)

    if isinstance(self.vals, list):
      for val in self.vals:
        if hasattr(val, 'onLoad'):
          getattr(val, 'onLoad')(loadFnc)
    else:
      if hasattr(self.vals, 'onLoad'):
        getattr(self.vals, 'onLoad')(loadFnc)
    return loadFnc

  def jsEvents(self, jsEventFnc=None):
    """ Function to get the Javascript methods for this object and all the underlying objects """
    if jsEventFnc is None:
      jsEventFnc = self.jsEventFnc
    for jEventType, jsEvent in self.jsEvent.items():
      jsEventFnc[jEventType].add(str(jsEvent))

    if isinstance(self.vals, list):
      for val in self.vals:
        if hasattr(val, 'jsEvent'):
          getattr(val, 'jsEvents')(jsEventFnc)
    else:
      if hasattr(self.vals, 'jsEvent'):
        getattr(self.vals, 'jsEvents')(jsEventFnc)
    return jsEventFnc

  def html(self):
    """ Return the onload, the HTML object and the javascript events """
    self.graph()
    return self.onLoad(), str(self), self.jsEvents()

  @classmethod
  def aresExample(cls, aresObj):
    return aresObj

  def graph(self):
    return None


class NavBar(object):
  """ """

  alias = None

  def __init__(self, titleAttr):
    """ """
    self.titleAttr = titleAttr

  def unstackTitles(self, titleLst):
    result = []
    result.append('<ul style="list-style-type:none">')
    for title in titleLst:
      result.append(r'<li><a href="#%s" class="w3-hover-green">%s</a></li>' % (title['value'], title['value']))
      if title['subObj']:
        result.append(self.unstackTitles(title['subObj']))
    result.append(r'</ul>')
    return '\n'.join(result)


  def html(self):
    """ """
    content = []
    if self.titleAttr['cssCls']:
      content.append('<div class="%s" style="width:%s%%">' % (self.titleAttr['cssCls'], self.titleAttr['width']))
    else:
      content.append('<div class="w3-sidebar w3-light-grey w3-bar-block" style="width:%s%%">' % self.titleAttr['width'])
    content.append(r'<h3 class="w3-bar-item">Navigation</h3>')
    content.append(self.unstackTitles(self.titleAttr['content']))
    content.append(r'</div>')
    return '\n'.join(content)


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#
#                      IN PROGRESS TO ADD THE NEW HTML5 FEATURES
#------------------------------------------------------------------------------------------

class WebStorage(object):
  """ This module should manage local and also session storage
  """


class WebWorkers(object):
  """ This module should create web workers for any javascript functions
  """
  references = ['https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers']

  def __init__(self, aresObj, htmlObj, jsFile):
    """ Define the script attached to the worker in the main module """
    self.aresObj = aresObj
    self.htmlId = "%s_%s" % (self.__class__.__name__.lower(), id(self))
    if not 'htmlWorkers' in self.aresObj:
      self.aresObj['htmlWorkers'] = {self.htmlId: jsFile}
    else:
      self.aresObj['htmlWorkers'][self.htmlId] = jsFile

  def onmessage(self, jsFragment):
    """ Define the javascript event for the worker """
    return '''
             .onmessage  = function(e) {
                  %s ;
              }
           ''' % jsFragment

  def terminate(self):
    """  """
    return ".terminate() ;"

  def stop(self):
    """ Returns the javascript function to stop the worker """
    return ".close() ;"


class WebSharedWorkers(object):
  """ """
  references = ['https://openclassrooms.com/courses/html5-web-workers-le-monde-parallele-du-javascript/les-shared-workers']


class WebSeverSentEvent(object):
  """ This module should manage the server sent notification

  THis class will create an entry point to update en HTML object
  automatically when the client will receive messages from the server.

  Basically the client will register to receive events from a Source on the server
  In Flask it will be a dedicated URL route and once receive it will run the
  onmessage method on a particular HTML component
  """
  references = ['http://www.developerdrive.com/2012/03/pushing-updates-to-the-web-page-with-html5-server-sent-events/']

  def __init__(self, aresObj, htmlObj, serverEntryPoint):
    """ """
    self.aresObj = aresObj
    self.eventSource = serverEntryPoint

  def onmessage(self, jsFragment):
    """ Python wrapper to the javascript code to receive messages """
    return '''
             .onmessage  = function(e) {
                  %s ;
              }
           ''' % jsFragment